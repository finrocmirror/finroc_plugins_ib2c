//
// %%INTRO%%
//
// Copyright (C) %%COPYRIGHT%%
//
// %%LICENSE%%
//
//----------------------------------------------------------------------
/*!\file    %%FILE%%
 *
 * \author  %%AUTHOR%%
 *
 * \date    %%DATE%%
 *
 */
//----------------------------------------------------------------------
#include "%%HEADER_PATH%%"

//----------------------------------------------------------------------
// External includes (system with <>, local with "")
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Internal includes with ""
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Debugging
//----------------------------------------------------------------------
#include <cassert>

//----------------------------------------------------------------------
// Namespace usage
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Namespace declaration
//----------------------------------------------------------------------
%%OPEN_NAMESPACE%%

//----------------------------------------------------------------------
// Forward declarations / typedefs / enums
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// Const values
//----------------------------------------------------------------------
runtime_construction::tStandardCreateModuleAction<gbb%%NAME%%> cCREATE_ACTION_FOR_GBB_%%NAME_IN_UPPER_CASE%%("%%NAME%%");

//----------------------------------------------------------------------
// Implementation
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// g%%NAME%% constructor
//----------------------------------------------------------------------
gbb%%NAME%%::gbb%%NAME%%(core::tFrameworkElement *parent, const std::string &name,
         %%INDENT_TWO_NAMES%%ib2c::tStimulationMode stimulation_mode, unsigned int number_of_inhibition_ports,
         %%INDENT_TWO_NAMES%%const std::string &structure_config_file) :
  ib2c::tGroup(parent, name, stimulation_mode, number_of_inhibition_ports, structure_config_file),
  If you have some member variables, please initialize them here. Especially built-in types (like pointers!). Delete this line otherwise!
{
  this->RegisterCharacteristicModule(new ib2c::mbbFusion<>(this, "Fusion", 2));   Register the characteristic module for this group. Usually a fusion behavior.

  mbbBehavior *behavior_1 = new mbbBehavior_1(this, "Behavior 1", ENABLED);   Create some behavior_1 that is fully stimulated
  mbbBehavior *behavior_2 = new mbbBehavior_2(this, "Behavior 2", ENABLED);   Create some behavior_2 that is fully stimulated

  ib2c::mbbFusionBase &fusion = static_cast<ib2c::mbbFusionBase &>(this->CharacteristicModule());   Treat characteristic module as mbbFusionBase (only valid if you know that it is an mbbFusion)

  behavior_1->activity.ConnectTo(fusion.InputActivity(0));            Connect activity of behavior 1 to fusion module
  behavior_1->target_rating.ConnectTo(fusion.InputTargetRating(0));   Connect target rating of behavior 1 to fusion module

  behavior_2->activity.ConnectTo(fusion.InputActivity(1));            Connect activity of behavior 2 to fusion module
  behavior_2->target_rating.ConnectTo(fusion.InputTargetRating(1));   Connect target rating of behavior 2 to fusion module
}

//----------------------------------------------------------------------
// gbb%%NAME%% destructor
//----------------------------------------------------------------------
gbb%%NAME%%::~gbb%%NAME%%()
{}

//----------------------------------------------------------------------
// gbb%%NAME%% OnStaticParameterChange
//----------------------------------------------------------------------
void gbb%%NAME%%::OnStaticParameterChange()
{
  tGroup::OnStaticParameterChange();

  if (this->static_parameter_1.HasChanged())
  {
    As this static parameter has changed, do something with its value!
  }
}

//----------------------------------------------------------------------
// End of namespace declaration
//----------------------------------------------------------------------
%%CLOSE_NAMESPACE%%
